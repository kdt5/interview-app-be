generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

/// 사용자 정보를 저장하는 모델
model User {
  id              Int                  @id @default(autoincrement())
  nickname        String               @unique @db.VarChar(50)
  email           String               @unique @db.VarChar(254)
  password        String               @db.VarChar(60)
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @default(now()) @updatedAt @map("updated_at")
  profileImageUrl String?              @map("profile_image_url") @db.VarChar(254)
  answers         Answer[]
  comments        Comment[]
  favorites       Favorite[]
  refreshTokens   RefreshToken[]
  resetTokens     PasswordResetToken[]
  Position        Position?            @relation(fields: [positionId], references: [id])
  positionId      Int?                 @map("position_id")
  communityPosts  CommunityPost[]
  reports         Report[]

  @@index([positionId], map: "User_position_id_fkey")
}

/// 질문 정보를 저장하는 모델
model Question {
  id             Int                @id @default(autoincrement())
  title          String
  content        String             @db.Text
  isWeekly       Boolean            @default(false) @map("is_weekly")
  createdAt      DateTime           @default(now()) @map("created_at")
  favoriteCount  Int                @default(0) @map("favorite_count")
  answers        Answer[]
  categories     QuestionCategory[]
  weeklyQuestion WeeklyQuestion?
  viewCount      Int                @default(0) @map("view_count")
}

/// 주간 질문을 저장하는 모델
model WeeklyQuestion {
  /// 고유 식별자
  questionId Int      @id @map("question_id")
  /// 질문의 주간 질문 시작일
  startDate  DateTime @unique
  /// 관계 설정 (Foreign Key)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

/// 답변 정보를 저장하는 모델
model Answer {
  id            Int      @id @default(autoincrement())
  content       String   @db.Text
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int      @map("user_id")
  question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId    Int      @map("question_id")
  favoriteCount Int      @default(0) @map("favorite_count")
  viewCount     Int      @default(0) @map("view_count")

  @@index([questionId])
  @@index([userId], map: "Answer_user_id_fkey")
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([userId, favoriteCount])
}

/// 커뮤니티 게시글을 저장하는 모델
model CommunityPost {
  id             Int                   @id @default(autoincrement())
  title          String
  content        String                @db.Text
  createdAt      DateTime              @default(now()) @map("created_at")
  updatedAt      DateTime              @default(now()) @map("updated_at")
  userId         Int                   @map("user_id")
  user           User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  favoriteCount  Int                   @default(0) @map("favorite_count")
  postCategoryId Int                   @map("post_category_id")
  postCategory   CommunityPostCategory @relation(fields: [postCategoryId], references: [id], onDelete: Cascade)
  viewCount      Int                   @default(0) @map("view_count")

  @@index([userId])
  @@index([postCategoryId])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([userId, favoriteCount])
}

model CommunityPostCategory {
  id             Int             @id @default(autoincrement())
  name           String          @unique @db.VarChar(50)
  communityPosts CommunityPost[]
}

model Comment {
  id            Int              @id @default(autoincrement())
  content       String           @db.Text
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @default(now()) @updatedAt @map("updated_at")
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int              @map("user_id")
  category      CommentCategory? @relation(fields: [categoryId], references: [id])
  categoryId    Int?             @map("category_id")
  targetId      Int              @map("post_id")
  parent        Comment?         @relation("Parent", fields: [parentId], references: [id])
  parentId      Int?             @map("parent_id")
  children      Comment[]        @relation("Parent")
  isDeleted     Boolean          @default(false) @map("is_deleted")
  deletedAt     DateTime?        @map("deleted_at")
  favoriteCount Int              @default(0) @map("favorite_count")

  @@index([userId], map: "Comment_user_id_fkey")
  @@index([parentId], map: "Comment_parent_id_fkey")
  @@index([categoryId], map: "Comment_category_id_fkey")
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([userId, favoriteCount])
  @@map("Comment")
}

model CommentCategory {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(50)
  comments Comment[]
}

/// 신고된 게시글 및 댓글을 저장하는 모델
model Report {
  id         Int              @id @default(autoincrement())
  reporter   User             @relation(fields: [reporterId], references: [id])
  reporterId Int              @map("user_id")
  targetType ReportTargetType @map("target_type")
  targetId   Int              @map("target_id")
  reason     String
  status     ReportStatus     @default(PENDING)
  createdAt  DateTime         @default(now()) @map("created_at")

  @@index([reporterId])
  @@index([targetType, targetId])
  @@index([status])
}

/// 신고된 대상의 종류
enum ReportTargetType {
  POST
  COMMENT
}

/// 신고된 대상의 처리 상태
enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
}

/// 즐겨찾기 정보를 저장하는 모델
model Favorite {
  id         Int                @id @default(autoincrement())
  targetType FavoriteTargetType @map("target_type")
  targetId   Int                @map("target_id")
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int                @map("user_id")
  createdAt  DateTime           @default(now()) @map("created_at")

  @@unique([targetType, targetId, userId])
  @@index([userId])
  @@index([targetType, targetId])
}

/// 즐겨찾기된 대상의 종류
enum FavoriteTargetType {
  QUESTION
  POST
  ANSWER
  COMMENT
}

/// 카테고리 정보를 저장하는 모델
model Category {
  /// 고유 식별자
  id         Int                @id @default(autoincrement())
  /// 카테고리 이름
  name       String
  /// 카테고리 포지션 ID
  positionId Int                @map("position_id")
  /// 카테고리와 연관된 질문들
  questions  QuestionCategory[]
  /// Position과의 관계 설정
  position   Position           @relation(fields: [positionId], references: [id])

  @@index([positionId])
}

/// 질문과 카테고리의 다대다 관계를 저장하는 모델
model QuestionCategory {
  /// 질문 정보
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  /// 질문 ID
  questionId Int      @map("question_id")
  /// 카테고리 정보
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  /// 카테고리 ID
  categoryId Int      @map("category_id")

  @@unique([questionId, categoryId])
  @@index([questionId, categoryId])
  @@index([categoryId], map: "QuestionCategory_category_id_fkey")
}

/// 리프레시 토큰 정보를 저장하는 모델
model RefreshToken {
  id          Int      @id @default(autoincrement())
  hashedToken String   @unique
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int      @map("user_id")
  device      String?  @db.VarChar(255)

  @@index([userId])
  @@index([hashedToken])
}

/// 직무 정보를 저장하는 모델
model Position {
  id          Int        @id @default(autoincrement())
  code        String     @unique
  name        String
  description String?
  order       Int        @default(0)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now())
  categories  Category[]
  users       User[]
}

/// 비밀번호 재설정 토큰 정보를 저장하는 모델
model PasswordResetToken {
  id          Int      @id @default(autoincrement())
  hashedToken String   @unique
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int      @map("user_id")

  @@index([userId])
  @@index([hashedToken])
}
